$date
	Fri May 13 13:15:45 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module simcpu $end
$var wire 16 ! DD [15:0] $end
$var wire 1 " RW $end
$var wire 16 # IA [15:0] $end
$var wire 16 $ DA [15:0] $end
$var reg 1 % CK $end
$var reg 16 & DDi [15:0] $end
$var reg 16 ' ID [15:0] $end
$var reg 1 ( RST $end
$scope module c $end
$var wire 1 % CK $end
$var wire 16 ) DA [15:0] $end
$var wire 16 * DD [15:0] $end
$var wire 16 + IA [15:0] $end
$var wire 16 , ID [15:0] $end
$var wire 1 ( RST $end
$var wire 4 - OPR3 [3:0] $end
$var wire 4 . OPR2 [3:0] $end
$var wire 4 / OPR1 [3:0] $end
$var wire 4 0 OPCODE [3:0] $end
$var wire 8 1 IMM [7:0] $end
$var wire 16 2 CBUS [15:0] $end
$var wire 16 3 BBUS [15:0] $end
$var wire 16 4 ABUS [15:0] $end
$var reg 1 5 FLAG $end
$var reg 16 6 FUA [15:0] $end
$var reg 16 7 FUB [15:0] $end
$var reg 16 8 FUC [15:0] $end
$var reg 16 9 INST [15:0] $end
$var reg 16 : LSUA [15:0] $end
$var reg 16 ; LSUB [15:0] $end
$var reg 16 < LSUC [15:0] $end
$var reg 16 = PC [15:0] $end
$var reg 16 > PCC [15:0] $end
$var reg 16 ? PCI [15:0] $end
$var reg 1 " RW $end
$var reg 2 @ STAGE [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
0(
bx '
bx &
0%
bx $
bx #
x"
bx !
$end
#5
1(
#10
1"
b0 @
b0 #
b0 +
b0 =
1%
#20
b1100000000000000 '
b1100000000000000 ,
0%
#30
1%
#40
0%
#50
1%
#60
0%
#70
1%
#80
0%
#90
1%
#100
0%
#105
0(
#110
b0 2
b0 4
b0 3
b1100 0
b0 /
b0 .
b0 -
b0 1
b1100000000000000 9
b1 @
1%
#120
0%
#130
b1 ?
b10 @
1%
#140
0%
#150
b11 @
1%
#160
0%
#170
b1 #
b1 +
b1 =
b0 @
1%
#180
b1100000100000001 '
b1100000100000001 ,
0%
#190
b1 2
bx 3
b1 /
b1 -
b1 1
b1100000100000001 9
b1 @
1%
#200
0%
#210
b10 ?
b10 @
1%
#220
0%
#230
b11 @
1%
#240
0%
#250
b1 3
b10 #
b10 +
b10 =
b0 @
1%
#260
b1100001000000010 '
b1100001000000010 ,
0%
#270
b10 2
bx 3
b10 /
b10 -
b10 1
b1100001000000010 9
b1 @
1%
#280
0%
#290
b11 ?
b10 @
1%
#300
0%
#310
b11 @
1%
#320
0%
#330
b10 3
b11 #
b11 +
b11 =
b0 @
1%
#340
b1100001100000011 '
b1100001100000011 ,
0%
#350
b11 2
bx 3
b11 /
b11 -
b11 1
b1100001100000011 9
b1 @
1%
#360
0%
#370
b100 ?
b10 @
1%
#380
0%
#390
b11 @
1%
#400
0%
#410
b11 3
b100 #
b100 +
b100 =
b0 @
1%
#420
b1100010000000100 '
b1100010000000100 ,
0%
#430
b100 2
bx 3
b100 /
b100 -
b100 1
b1100010000000100 9
b1 @
1%
#440
0%
#450
b101 ?
b10 @
1%
#460
0%
#470
b11 @
1%
#480
0%
#490
b100 3
b101 #
b101 +
b101 =
b0 @
1%
#500
b10100010011 '
b10100010011 ,
0%
#510
bx 2
b1 4
b11 3
b0 0
b101 /
b1 .
b11 -
b10011 1
b10100010011 9
b1 @
1%
#520
0%
#530
b110 ?
b11 7
b1 6
b10 @
1%
#540
0%
#550
b100 2
b100 8
b11 @
1%
#560
0%
#570
05
b110 #
b110 +
b110 =
b0 @
1%
#580
b1010000001010000 '
b1010000001010000 ,
0%
#590
bx 2
b100 4
b0 3
b1010 0
b0 /
b101 .
b0 -
b1010000 1
b1010000001010000 9
b1 @
1%
#600
0%
#610
b111 ?
b0 $
b0 )
b0 ;
b100 :
b10 @
1%
#620
0%
#630
b100 !
b100 *
0"
b11 @
1%
#640
0%
